Configure NGINX to serve the Node and Angular app
    Like we said; the only port 80 (HTTP) is publicly accessible on the server!
    And like we have two separate projects:
     - front-end
     - back-end
    Both need to be accessed via the same port(HTTP on port 80)!

    NGINX:
     - We use this as our public facing web server to:
       - receive requests for both projects
       - decide where to send each request based on its path
     - Requests beginning with the path /api/* will be proxied through to the Node.js api running on port 4000
     - Other requests will serve the Angular front-end app and associated files (js/css/images).

    Steps:
     - We delete the default NGINX site config file with the command:
       ❯ sudo rm /etc/nginx/sites-available/default
     - Launch the nano text editor to create an new default site config file with:
       ❯ sudo nano /etc/nginx/sites-available/default
     - Paste in the config are below
     - This config means:
       - listen 80 port as our server!
       - all related angular app will be index.html of opt/front-end folder
       - all localhost:4000/ will be send in /api/ of the same path of our angular app!!
    

-- /etc/nginx/sites-available/default:

server {
  charset utf-8;
  listen 80 default_server;
  server_name _;

  # angular app & front-end files
  location / {
    root /opt/front-end;
    try_files $uri /index.html;
  }

  # node api reverse proxy
  location /api/ {
    proxy_pass http://localhost:4000/;
  }
}



-or-



server {
  charset utf-8;
  listen 80 default_server;
  listen [::]:80 default_server;
  root /var/www/html;
  index index.html index.htm index.nginx-debian.html;

  server_name _;

  # angular app & front-end files
  location / {
    root /opt/front-end;
    try_files $uri /index.html;
  }

  # node api reverse proxy
  location /api/ {
    proxy_pass http://localhost:4000/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
  }
}


